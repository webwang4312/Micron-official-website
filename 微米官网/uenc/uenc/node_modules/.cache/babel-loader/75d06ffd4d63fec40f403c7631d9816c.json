{"remainingRequest":"D:\\weimi\\Micron-official-website\\微米官网\\uenc\\uenc\\node_modules\\babel-loader\\lib\\index.js!D:\\weimi\\Micron-official-website\\微米官网\\uenc\\uenc\\src\\assets\\server\\server.js","dependencies":[{"path":"D:\\weimi\\Micron-official-website\\微米官网\\uenc\\uenc\\src\\assets\\server\\server.js","mtime":1623717594293},{"path":"D:\\weimi\\Micron-official-website\\微米官网\\uenc\\uenc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1623717554021},{"path":"D:\\weimi\\Micron-official-website\\微米官网\\uenc\\uenc\\node_modules\\babel-loader\\lib\\index.js","mtime":1623717553223}],"contextDependencies":[],"result":["/*\r\n * @Author: yaoyuting\r\n * @Date: 2021-04-23 17:17:02\r\n * @LastEditors: yaoyuting\r\n * @LastEditTime: 2021-04-28 16:55:22\r\n * @Descripttion: \r\n */\nimport axios from 'axios'; // 创建axios实例\n\nvar service = axios.create({\n  // api 的 base_url\n  //baseURL: 'http://47.98.110.210:8081/',\n  timeout: 50000 // 请求超时时间(因为需要调试后台,所以设置得比较大)\n\n}); // request拦截器(请求前的处理)\n\nservice.interceptors.request.use(function (config) {\n  // if (store.getters.token) {\n  //   config.headers['X-Token'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n  // }\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // response 拦截器(数据返回后的处理)\n\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  if (res.code === 200) {\n    return response.data;\n  } else if (res.code === 500) {\n    window.location.href = \"/\"; // 跳转到登陆页面\n  } else {\n    return Promise.reject('error');\n  }\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport function get(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios.get(url, {\n      params: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nexport function getss(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios({\n      method: \"get\",\n      url: url,\n      xhrFields: {\n        withCredentials: true\n      },\n      //前端适配：允许session跨域 \n      crossDomain: true,\n      params: params\n    }).then(function (res) {\n      resolve(res.data);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n} // xhrFields: {withCredentials:true}, //前端适配：允许session跨域 crossDomain: true,\n\nexport function gets(url, params) {\n  return new Promise(function (resolve, reject) {\n    axios({\n      method: \"get\",\n      url: url,\n      responseType: \"blob\"\n    }).then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nexport function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.post(url, data, {// headers: {\n      //     Accept: \"application/x-www-form-urlencoded; charset=utf-8\",\n      //     \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8;\",\n      // }\n    }).then(function (response) {\n      resolve(response.data);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}\nexport function posts(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.post(url, data, {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8;\"\n      }\n    }).then(function (response) {\n      resolve(response.data);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}",{"version":3,"sources":["D:/weimi/Micron-official-website/微米官网/uenc/uenc/src/assets/server/server.js"],"names":["axios","service","create","timeout","interceptors","request","use","config","error","console","log","Promise","reject","response","res","data","code","window","location","href","get","url","params","resolve","then","catch","err","getss","method","xhrFields","withCredentials","crossDomain","gets","responseType","post","posts","headers"],"mappings":"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","sourcesContent":["/*\r\n * @Author: yaoyuting\r\n * @Date: 2021-04-23 17:17:02\r\n * @LastEditors: yaoyuting\r\n * @LastEditTime: 2021-04-28 16:55:22\r\n * @Descripttion: \r\n */\r\nimport axios from 'axios'\r\n// 创建axios实例\r\nconst service = axios.create({\r\n    // api 的 base_url\r\n     //baseURL: 'http://47.98.110.210:8081/',\r\n    timeout: 50000 // 请求超时时间(因为需要调试后台,所以设置得比较大)\r\n})\r\n\r\n// request拦截器(请求前的处理)\r\nservice.interceptors.request.use(\r\n    config => {\r\n        // if (store.getters.token) {\r\n        //   config.headers['X-Token'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\r\n        // }\r\n        return config\r\n    },\r\n    error => {\r\n        // Do something with request error\r\n        console.log(error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// response 拦截器(数据返回后的处理)\r\nservice.interceptors.response.use(\r\n    response => {\r\n        const res = response.data\r\n        if (res.code === 200) {\r\n            return response.data\r\n        } else if (res.code === 500) {\r\n            window.location.href = \"/\"\r\n            // 跳转到登陆页面\r\n        } else {\r\n            return Promise.reject('error')\r\n        }\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\n\r\nexport function get(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.get(url, { params: params }).then(res => {\r\n            resolve(res.data)\r\n        }).catch(err => {\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n\r\nexport function getss(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        axios({\r\n            method: \"get\",\r\n            url,\r\n            xhrFields: {\r\n                withCredentials: true\r\n            }, //前端适配：允许session跨域 \r\n            crossDomain: true,\r\n            params: params\r\n        }).then(res => {\r\n            resolve(res.data)\r\n        }).catch(err => {\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n// xhrFields: {withCredentials:true}, //前端适配：允许session跨域 crossDomain: true,\r\n\r\nexport function gets(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n        axios({\r\n            method: \"get\",\r\n            url,\r\n            responseType: \"blob\",\r\n        }).then(res => {\r\n            resolve(res)\r\n        }).catch(err => {\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n\r\nexport function post(url, data = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(url, data, {\r\n            // headers: {\r\n            //     Accept: \"application/x-www-form-urlencoded; charset=utf-8\",\r\n            //     \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8;\",\r\n            // }\r\n        }).then(response => {\r\n            resolve(response.data);\r\n        }, err => {\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n\r\nexport function posts(url, data = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        axios.post(url, data, {\r\n            headers: {\r\n                \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8;\",\r\n            }\r\n        }).then(response => {\r\n            resolve(response.data);\r\n        }, err => {\r\n            reject(err)\r\n        })\r\n    })\r\n}\r\n\r\n"]}]}